/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.4
 * Generated at: 2017-07-06 02:36:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.dependency;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tableDependency_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<link href=\"css/tableCss.css\" rel=\"stylesheet\" />\n");
      out.write("<script src=\"js/jquery.dataTables.min.js\"></script>\n");
      out.write("<script src=\"js/jquery.table.extend.js\"></script>\n");
      out.write("<!-- $(function () {\n");
      out.write("\t\n");
      out.write("\tthis.tableID =\"tableListId\";\n");
      out.write("\ttableJs = new TableJs(this.tableID);\n");
      out.write("\ttableJs.pushHead(\"ID\", \"id\");\n");
      out.write("\ttableJs.pushHead(\"姓名\", \"name\");\n");
      out.write("\ttableJs.pushHead(\"性别1\", \"sex\");\n");
      out.write("\ttableJs.pushHead(\"年龄\", \"age\");\n");
      out.write("\t\n");
      out.write("\tvar configHelper = new TableJsConfigHelper();\n");
      out.write("\tconfigHelper.setFenYe(true);//是否启用分页功能,默认不启用\n");
      out.write("\tconfigHelper.setSearchEnable(true);//　是否启用搜索功能，默认启用\n");
      out.write("\tconfigHelper.setSearchText(\"请输入相应搜索内容\");//设置搜索框标题\n");
      out.write("\t//configHelper.setServerUrl(\"/test/data/test\");//服务器分页 设置url,会自动使用\n");
      out.write("\tconfigHelper.setServerParams({\"server\":\"localhost\"});\n");
      out.write("\t//configHelper.setServerEnable(false);//服务器分页 禁用\n");
      out.write("\t// 服务器分页 默认传递参数{start:起始位置,count:长度,search:搜索内容}，返回值格式{total:数据总长度,data:[]} data为查询出的部分数据，total是所有数据的总长度\n");
      out.write("\tconfigHelper.setCheckBox(true, \"checkbox\", true);// 设置启用 checkbox\n");
      out.write("\tconfigHelper.setOperation( \"myoperation\", true, \"操作\");//设置操作列\n");
      out.write("\t\n");
      out.write("\t/*\n");
      out.write("\t//1替换\n");
      out.write("\tvar replaceHelper = new TableJsValueHelper();\n");
      out.write("\treplaceHelper.pushValue(\"日本\", \"日本帝国\"); //日本 替换为 日本帝国\n");
      out.write("\treplaceHelper.pushValue(\"上海\", \"上海的海上\");// 上海 替换为 上海的海上\n");
      out.write("\t//设置 value 列 应用上面的条件。\n");
      out.write("\tconfigHelper.pushReplace(\"value\", replaceHelper.getData());\n");
      out.write("\t\n");
      out.write("\t//2列之间替换\n");
      out.write("\tvar relationHelper = new TableJsValueHelper();\n");
      out.write("\trelationHelper.pushValue(\"北京\", \"BEI JING City\"); // 北京 替换为 BEI JING City\n");
      out.write("    // 设置 value == 北京 的列，name值显示BEI JING City\n");
      out.write("\tconfigHelper.pushRelation(\"name\", \"value\", relationHelper.getData());\n");
      out.write("\t\n");
      out.write("\tvar relationHelper = new TableJsValueHelper();\n");
      out.write("\trelationHelper.pushValue(\"bei jing\", \"Today\")\n");
      out.write("\tconfigHelper.pushRelation(\"value\", \"name\", relationHelper.getData());*/\n");
      out.write("\t\n");
      out.write("\t//3 按钮事件\n");
      out.write("\tvar btnHelper = new TableJsKeyValueHelper();\n");
      out.write("\tbtnHelper.pushValue(\"name\", [\"xiaoming1\",\"zhong guo\"]); //key为name的列，值是xiaoming1或zhong guo, \n");
      out.write("\t//根据上面的条件，设置哪些列 添加 删除事件按钮， \n");
      out.write("\tconfigHelper.pushBtn(\"myoperation\", \"删除\", deleteFunc, \"btn-success btn-sm\", btnHelper.getData()); \n");
      out.write("\n");
      out.write("\tvar relationHelper = new TableJsValueHelper();\n");
      out.write("\trelationHelper.pushValue(\"xiaoming1\", \"被替换了\");\n");
      out.write("\tconfigHelper.pushRelation(\"sex\", \"name\", relationHelper.getData());\n");
      out.write("\t//应用配置\n");
      out.write("\ttableJs.setConfig( configHelper.getConfig() );\n");
      out.write("\n");
      out.write("\t\n");
      out.write("\tvar data = [\n");
      out.write("\t            {name : \"tian jin\", value: \"天津\" },\n");
      out.write("\t            {name : \"bei jing\", value: \"北京\" },\n");
      out.write("\t            {name : \"xiaoming1\", value: \"上海\" },\n");
      out.write("\t            {name : \"ri ben\", value: \"日本\" },\n");
      out.write("\t            {name : \"zhong guo\", value: \"中国\" },\n");
      out.write("\t            {name : \"zhong guo1\", value: \"中国1\" }\n");
      out.write("\t    ];\n");
      out.write("\t//不使用服务器分页的时候起作用， 设置表格要显示的数据\n");
      out.write("\ttableJs.setData(data, \"name\", \"value\");\n");
      out.write("\t\n");
      out.write("\ttableJs.show();\n");
      out.write("});\n");
      out.write("function deleteFunc ( evt) {\n");
      out.write("\tconsole.info( evt );\n");
      out.write("\tconsole.info(\"deleteFuncData\",this.getValuesOn( $(evt.target))); //获取单个行的数据\n");
      out.write("\tconsole.info(\"checked\",this.getValues(true));//获取checkbox选中的行的数据\n");
      out.write("} -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
